#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    // Handle edge cases
    if (numsSize < 3) {
        *returnSize = 0;
        *returnColumnSizes = NULL;
        return NULL;
    }

    qsort(nums, numsSize, sizeof(int), compare);

    int cap = 10;
    int size = 0;
    int **res = (int **)malloc(sizeof(int *) * cap);
    *returnColumnSizes = (int **)malloc(sizeof(int *) * cap);

    for (int i = 0; i < numsSize - 2; i++) {
        
        if (i > 0 && nums[i] == nums[i - 1]) continue;

        int l = i + 1;
        int r = numsSize - 1;

        while (l < r) {
            int sum = nums[i] + nums[l] + nums[r];
            if (sum == 0) {
                if (size == cap) {
                    cap *= 2;
                    res = (int **)realloc(res, sizeof(int *) * cap);
                    *returnColumnSizes = (int *)realloc(*returnColumnSizes, sizeof(int) * cap);
                }

                res[size] = (int *)malloc(sizeof(int) * 3);
                if (res[size] == NULL) return NULL;

                res[size][0] = nums[i];
                res[size][1] = nums[l];
                res[size][2] = nums[r];
                (*returnColumnSizes)[size] = 3;
                size++;

                while (l < r && nums[l] == nums[l + 1]) l++;
                while (l < r && nums[r] == nums[r - 1]) r--;
                l++;
                r--;
            } else if (sum < 0) {
                l++;
            } else {
                r--;
            }
        }
    }

    *returnSize = size;
    return res;
}

//Runtime 225ms
//Memory 
